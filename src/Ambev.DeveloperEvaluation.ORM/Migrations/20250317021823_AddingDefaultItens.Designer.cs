// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250317021823_AddingDefaultItens")]
    partial class AddingDefaultItens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e49c076d-3046-4399-8d41-94cc9bb65dc0"),
                            Address = "São Paulo - SP, Bairro Velha Guarda, nº 60",
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4775),
                            Name = "Filial São Paulo"
                        },
                        new
                        {
                            Id = new Guid("c34d2387-e900-4704-9fe4-09bfaa50f0e1"),
                            Address = "Florianópolis - SC, Trindade, nº 195",
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4777),
                            Name = "Filial Florianópolis"
                        },
                        new
                        {
                            Id = new Guid("f2495571-1390-411a-9bfd-669185afea64"),
                            Address = "Curitiba - PR, Centro, nº 300",
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4779),
                            Name = "Filial Curitiba"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sales.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2555343d-facf-4c33-b8a6-5fad76be36a3"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4892),
                            Description = "Arroz integral orgânico, pacote de 5kg",
                            Name = "Arroz Integral"
                        },
                        new
                        {
                            Id = new Guid("0f038ef4-2b67-4b7b-9454-801ab6581f54"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4894),
                            Description = "Feijão preto, pacote de 1kg",
                            Name = "Feijão Preto"
                        },
                        new
                        {
                            Id = new Guid("ccc9047b-23d4-4260-b29e-2b9c0229bf86"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4895),
                            Description = "Azeite extra virgem, garrafa de 500ml",
                            Name = "Azeite de Oliva"
                        },
                        new
                        {
                            Id = new Guid("4e662887-962a-46d8-9aed-aa6c0efb7e76"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4896),
                            Description = "Macarrão espaguete, pacote de 500g",
                            Name = "Macarrão Espaguete"
                        },
                        new
                        {
                            Id = new Guid("184c3336-c66e-42e5-8738-11cbe96f527a"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4897),
                            Description = "Leite integral, caixa de 1L",
                            Name = "Leite Integral"
                        },
                        new
                        {
                            Id = new Guid("5d0b27be-eaeb-4483-8960-489e65f2452d"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4898),
                            Description = "Café em grãos torrado, pacote de 1kg",
                            Name = "Café em Grãos"
                        },
                        new
                        {
                            Id = new Guid("d7dae433-b37b-41c4-8e86-330fe3259c03"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4899),
                            Description = "Sabão em pó para roupas, pacote de 2kg",
                            Name = "Sabão em Pó"
                        },
                        new
                        {
                            Id = new Guid("955f7c88-fe46-483b-9411-19ee00271974"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4900),
                            Description = "Papel higiênico folha dupla, pacote com 12 rolos",
                            Name = "Papel Higiênico"
                        },
                        new
                        {
                            Id = new Guid("1ce1afda-b45d-41ea-a2f4-3c4554154aa6"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4901),
                            Description = "Desinfetante aroma pinho, frasco de 2L",
                            Name = "Desinfetante"
                        },
                        new
                        {
                            Id = new Guid("eb938eb0-572a-4ae2-953a-2bd55e1709bc"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4902),
                            Description = "Detergente líquido neutro, frasco de 500ml",
                            Name = "Detergente Líquido"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sales.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateSold")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fc34cef-afed-4edb-ab5f-44a1e2eea0a9"),
                            BranchId = new Guid("e49c076d-3046-4399-8d41-94cc9bb65dc0"),
                            ClientId = new Guid("ffb140dc-53be-48d5-8c6e-5d3f93271bff"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4968),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4959),
                            Number = "SALE001",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e8765c98-ce78-4090-ae9a-903101d023c1"),
                            BranchId = new Guid("c34d2387-e900-4704-9fe4-09bfaa50f0e1"),
                            ClientId = new Guid("bb6f91f2-1720-4191-9022-24254953fa18"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(5082),
                            DateSold = new DateTime(2025, 3, 16, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(5046),
                            Number = "SALE002",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a37f6397-3a09-435f-829d-a19c19728a9b"),
                            BranchId = new Guid("f2495571-1390-411a-9bfd-669185afea64"),
                            ClientId = new Guid("0af35800-836a-418a-8a44-f9d21b832fa2"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(5097),
                            DateSold = new DateTime(2025, 3, 15, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(5094),
                            Number = "SALE003",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("acfeb46e-4383-48dc-af5a-9d1d64445042"),
                            BranchId = new Guid("e49c076d-3046-4399-8d41-94cc9bb65dc0"),
                            ClientId = new Guid("ffb140dc-53be-48d5-8c6e-5d3f93271bff"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(5109),
                            DateSold = new DateTime(2025, 3, 14, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(5106),
                            Number = "SALE004",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("62bad870-cf24-4dee-8470-988fb0ee3361"),
                            BranchId = new Guid("c34d2387-e900-4704-9fe4-09bfaa50f0e1"),
                            ClientId = new Guid("bb6f91f2-1720-4191-9022-24254953fa18"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(5121),
                            DateSold = new DateTime(2025, 3, 13, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(5119),
                            Number = "SALE005",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sales.SaleProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateSold")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FixedDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercentageDiscount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostWithDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("019e40fb-fd1a-4edb-a061-b036060c1a64"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4923),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4916),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0.10m,
                            ProductId = new Guid("2555343d-facf-4c33-b8a6-5fad76be36a3"),
                            Quantity = 5,
                            SaleId = new Guid("6fc34cef-afed-4edb-ab5f-44a1e2eea0a9"),
                            TotalCost = 125.00m,
                            TotalCostWithDiscount = 112.5000m,
                            TotalDiscount = 12.5000m,
                            UnitPrice = 25.00m
                        },
                        new
                        {
                            Id = new Guid("4b263c2b-d9ad-4149-9e41-0ca45977f7f2"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4939),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4937),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0.20m,
                            ProductId = new Guid("0f038ef4-2b67-4b7b-9454-801ab6581f54"),
                            Quantity = 10,
                            SaleId = new Guid("6fc34cef-afed-4edb-ab5f-44a1e2eea0a9"),
                            TotalCost = 80.00m,
                            TotalCostWithDiscount = 64.0000m,
                            TotalDiscount = 16.0000m,
                            UnitPrice = 8.00m
                        },
                        new
                        {
                            Id = new Guid("60e1e8fd-8346-4210-a01e-8a1ee795435b"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4941),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4940),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0m,
                            ProductId = new Guid("ccc9047b-23d4-4260-b29e-2b9c0229bf86"),
                            Quantity = 2,
                            SaleId = new Guid("e8765c98-ce78-4090-ae9a-903101d023c1"),
                            TotalCost = 60.00m,
                            TotalCostWithDiscount = 60.00m,
                            TotalDiscount = 0.00m,
                            UnitPrice = 30.00m
                        },
                        new
                        {
                            Id = new Guid("2edf25e5-a58d-4e3b-b93c-3d1957433b31"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4944),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4943),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0.20m,
                            ProductId = new Guid("4e662887-962a-46d8-9aed-aa6c0efb7e76"),
                            Quantity = 20,
                            SaleId = new Guid("e8765c98-ce78-4090-ae9a-903101d023c1"),
                            TotalCost = 100.00m,
                            TotalCostWithDiscount = 80.0000m,
                            TotalDiscount = 20.0000m,
                            UnitPrice = 5.00m
                        },
                        new
                        {
                            Id = new Guid("4dfbec1a-adbb-4148-ab8d-4b23d692f549"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4947),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4946),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0.20m,
                            ProductId = new Guid("184c3336-c66e-42e5-8738-11cbe96f527a"),
                            Quantity = 14,
                            SaleId = new Guid("a37f6397-3a09-435f-829d-a19c19728a9b"),
                            TotalCost = 63.00m,
                            TotalCostWithDiscount = 50.4000m,
                            TotalDiscount = 12.6000m,
                            UnitPrice = 4.50m
                        },
                        new
                        {
                            Id = new Guid("bc70cb2d-e0cd-4b3d-a610-1c101f846926"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4949),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4948),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0.20m,
                            ProductId = new Guid("5d0b27be-eaeb-4483-8960-489e65f2452d"),
                            Quantity = 11,
                            SaleId = new Guid("a37f6397-3a09-435f-829d-a19c19728a9b"),
                            TotalCost = 550.00m,
                            TotalCostWithDiscount = 440.0000m,
                            TotalDiscount = 110.0000m,
                            UnitPrice = 50.00m
                        },
                        new
                        {
                            Id = new Guid("26fe8552-e4ca-4036-8470-9abdd06f48b6"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4952),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4951),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0.20m,
                            ProductId = new Guid("d7dae433-b37b-41c4-8e86-330fe3259c03"),
                            Quantity = 10,
                            SaleId = new Guid("acfeb46e-4383-48dc-af5a-9d1d64445042"),
                            TotalCost = 150.00m,
                            TotalCostWithDiscount = 120.0000m,
                            TotalDiscount = 30.0000m,
                            UnitPrice = 15.00m
                        },
                        new
                        {
                            Id = new Guid("4a93decd-8ce8-4a58-bc82-d159769f9965"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4954),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4953),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0m,
                            ProductId = new Guid("955f7c88-fe46-483b-9411-19ee00271974"),
                            Quantity = 3,
                            SaleId = new Guid("acfeb46e-4383-48dc-af5a-9d1d64445042"),
                            TotalCost = 60.00m,
                            TotalCostWithDiscount = 60.00m,
                            TotalDiscount = 0.00m,
                            UnitPrice = 20.00m
                        },
                        new
                        {
                            Id = new Guid("1063acfd-e15c-4f6f-8825-ae7f9036e188"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4956),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4955),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0.10m,
                            ProductId = new Guid("1ce1afda-b45d-41ea-a2f4-3c4554154aa6"),
                            Quantity = 5,
                            SaleId = new Guid("62bad870-cf24-4dee-8470-988fb0ee3361"),
                            TotalCost = 50.00m,
                            TotalCostWithDiscount = 45.0000m,
                            TotalDiscount = 5.0000m,
                            UnitPrice = 10.00m
                        },
                        new
                        {
                            Id = new Guid("e22d970d-a3ce-43ba-85e1-14ced4c267fe"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4959),
                            DateSold = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4958),
                            FixedDiscount = 0m,
                            PercentageDiscount = 0m,
                            ProductId = new Guid("eb938eb0-572a-4ae2-953a-2bd55e1709bc"),
                            Quantity = 2,
                            SaleId = new Guid("62bad870-cf24-4dee-8470-988fb0ee3361"),
                            TotalCost = 10.00m,
                            TotalCostWithDiscount = 10.00m,
                            TotalDiscount = 0.00m,
                            UnitPrice = 5.00m
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffb140dc-53be-48d5-8c6e-5d3f93271bff"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4870),
                            Email = "joao.silva@example.com",
                            Password = "senha123",
                            Phone = "11987654321",
                            Role = "Admin",
                            Status = "Active",
                            Username = "joao.silva"
                        },
                        new
                        {
                            Id = new Guid("bb6f91f2-1720-4191-9022-24254953fa18"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4872),
                            Email = "maria.souza@example.com",
                            Password = "senha456",
                            Phone = "11912345678",
                            Role = "Manager",
                            Status = "Inactive",
                            Username = "maria.souza"
                        },
                        new
                        {
                            Id = new Guid("0af35800-836a-418a-8a44-f9d21b832fa2"),
                            CreatedAt = new DateTime(2025, 3, 17, 2, 18, 23, 720, DateTimeKind.Utc).AddTicks(4874),
                            Email = "carlos.oliveira@example.com",
                            Password = "senha789",
                            Phone = "11955556666",
                            Role = "Customer",
                            Status = "Active",
                            Username = "carlos.oliveira"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sales.SaleProduct", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sales.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sales.Sale", "Sale")
                        .WithMany("SaleProducts")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sales.Sale", b =>
                {
                    b.Navigation("SaleProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
